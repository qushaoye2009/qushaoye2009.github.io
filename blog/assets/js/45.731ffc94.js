(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{288:function(t,n,e){"use strict";e.r(n);var s=e(28),r=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"原型与继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型与继承"}},[t._v("#")]),t._v(" 原型与继承")]),t._v(" "),e("h2",{attrs:{id:"原型对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),e("p",[t._v("通过构造函数为实例对象定义属性，虽然很方便，但是有一个缺点。同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。")]),t._v(" "),e("p",[t._v("这个问题的解决方法，就是 JavaScript 的原型对象（prototype）。")]),t._v(" "),e("p",[t._v("JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享。")]),t._v(" "),e("p",[t._v("JavaScript 规定，每个函数都有一个prototype属性，指向一个对象。对于普通函数来说，该属性基本无用。但是，对于构造函数来说，生成实例的时候，该属性会自动成为实例对象的原型。")]),t._v(" "),e("p",[t._v("原型对象的属性不是实例对象自身的属性。只要修改原型对象，变动就立刻会体现在所有实例对象上。")]),t._v(" "),e("p",[t._v("当实例对象本身没有某个属性或方法的时候，它会到原型对象去寻找该属性或方法。这就是原型对象的特殊之处。")]),t._v(" "),e("h3",{attrs:{id:"原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),e("p",[t._v("JavaScript 规定，所有对象都有自己的原型对象（prototype）。一方面，任何一个对象，都可以充当其他对象的原型；另一方面，由于原型对象也是对象，所以它也有自己的原型。因此，就会形成一个“原型链”（prototype chain）：对象到原型，再到原型的原型")]),t._v(" "),e("p",[t._v("如果一层层地上溯，所有对象的原型最终都可以上溯到Object.prototype，即Object构造函数的prototype属性。也就是说，所有对象都继承了Object.prototype的属性。这就是所有对象都有valueOf和toString方法的原因，因为这是从Object.prototype继承的。")]),t._v(" "),e("p",[t._v("而Object.prototype的原型是null。null没有任何属性和方法，也没有自己的原型。因此，原型链的尽头就是null。")]),t._v(" "),e("p",[t._v("读取对象的某个属性时，JavaScript 引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。如果直到最顶层的Object.prototype还是找不到，则返回undefined。")]),t._v(" "),e("p",[t._v("如果对象自身和它的原型，都定义了一个同名属性，那么优先读取对象自身的属性，这叫做“覆盖”（overriding）。")]),t._v(" "),e("p",[t._v("注意，一级级向上，在整个原型链上寻找某个属性，对性能是有影响的。所寻找的属性在越上层的原型对象，对性能的影响越大。如果寻找某个不存在的属性，将会遍历整个原型链。")]),t._v(" "),e("h3",{attrs:{id:"constructor-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#constructor-属性"}},[t._v("#")]),t._v(" constructor 属性")]),t._v(" "),e("p",[t._v("prototype对象有一个constructor属性，默认指向prototype对象所在的构造函数。")]),t._v(" "),e("p",[t._v("constructor属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的。")]),t._v(" "),e("p",[t._v("constructor属性表示原型对象与构造函数之间的关联关系，如果修改了原型对象，一般会同时修改constructor属性，防止引用的时候出错。")]),t._v(" "),e("p",[t._v("所以，修改原型对象时，一般要同时修改constructor属性的指向。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 坏的写法\nC.prototype = {\n  method1: function (...) { ... },\n  // ...\n};\n\n// 好的写法\nC.prototype = {\n  constructor: C,\n  method1: function (...) { ... },\n  // ...\n};\n\n// 更好的写法\nC.prototype.method1 = function (...) { ... };\n")])])]),e("h2",{attrs:{id:"继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),e("p",[t._v("让一个构造函数继承另一个构造函数，是非常常见的需求。这可以分成两步实现。第一步是在子类的构造函数中，调用父类的构造函数。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Sub(value) {\n  Super.call(this);\n  this.prop = value;\n}\n")])])]),e("p",[t._v("Sub是子类的构造函数，this是子类的实例。在实例上调用父类的构造函数Super，就会让子类实例具有父类实例的属性。")]),t._v(" "),e("p",[t._v("第二步，是让子类的原型指向父类的原型，这样子类就可以继承父类原型。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Sub.prototype = Object.create(Super.prototype);\nSub.prototype.constructor = Sub;\nSub.prototype.method = '...';\n")])])]),e("p",[t._v("上面代码中，Sub.prototype是子类的原型，要将它赋值为Object.create(Super.prototype)，而不是直接等于Super.prototype。否则后面两行对Sub.prototype的操作，会连父类的原型Super.prototype一起修改掉。")]),t._v(" "),e("p",[t._v("另外一种写法是Sub.prototype等于一个父类实例:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Sub.prototype = new Super();\n")])])]),e("p",[t._v("上面这种写法也有继承的效果，但是子类会具有父类实例的方法。有时，这可能不是我们需要的，所以不推荐使用这种写法。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nShape.prototype.move = function (x, y) {\n  this.x += x;\n  this.y += y;\n  console.info('Shape moved.');\n};\n\n// 第一步，子类继承父类的实例\nfunction Rectangle() {\n  Shape.call(this); // 调用父类构造函数\n}\n// 另一种写法\nfunction Rectangle() {\n  this.base = Shape;\n  this.base();\n}\n\n// 第二步，子类继承父类的原型\nRectangle.prototype = Object.create(Shape.prototype);\nRectangle.prototype.constructor = Rectangle;\n")])])]),e("h2",{attrs:{id:"多重继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多重继承"}},[t._v("#")]),t._v(" 多重继承")]),t._v(" "),e("p",[t._v("JavaScript 不提供多重继承功能，即不允许一个对象同时继承多个对象。但是，可以通过变通方法，实现这个功能。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function M1() {\n  this.hello = 'hello';\n}\n\nfunction M2() {\n  this.world = 'world';\n}\n\nfunction S() {\n  M1.call(this);\n  M2.call(this);\n}\n\n// 继承 M1\nS.prototype = Object.create(M1.prototype);\n// 继承链上加入 M2\nObject.assign(S.prototype, M2.prototype);\n\n// 指定构造函数\nS.prototype.constructor = S;\n\nvar s = new S();\ns.hello // 'hello'\ns.world // 'world'\n")])])]),e("h2",{attrs:{id:"class-的继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#class-的继承"}},[t._v("#")]),t._v(" Class 的继承")]),t._v(" "),e("p",[t._v("JavaScript 语言中，生成实例对象的传统方法是通过构造函数。ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。")]),t._v(" "),e("p",[t._v("基本上，ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n// ES6 的class改写\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n")])])]),e("p",[t._v("ES6 的类，完全可以看作构造函数的另一种写法。")]),t._v(" "),e("p",[t._v("Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class Point { /* ... */ }\n\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n")])])]),e("p",[t._v("子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。")]),t._v(" "),e("p",[t._v("ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。")]),t._v(" "),e("p",[t._v("另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。")]),t._v(" "),e("p",[t._v("super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。")]),t._v(" "),e("p",[t._v("第一种情况，super作为函数调用时，代表父类的构造函数；第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。")]),t._v(" "),e("p",[t._v("原生构造函数是指语言内置的构造函数，通常用来生成数据结构")]),t._v(" "),e("p",[t._v("ES5 是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数。")]),t._v(" "),e("p",[t._v("ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象this，然后再用子类的构造函数修饰this，使得父类的所有行为都可以继承。")]),t._v(" "),e("p",[t._v("ES6 可以自定义原生数据结构（比如Array、String等）的子类，这是 ES5 无法做到的。extends关键字不仅可以用来继承类，还可以用来继承原生的构造函数。因此可以在原生数据结构的基础上，定义自己的数据结构。")])])}),[],!1,null,null,null);n.default=r.exports}}]);