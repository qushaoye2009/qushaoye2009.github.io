(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{282:function(t,r,a){"use strict";a.r(r);var n=a(28),s=Object(n.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-开发面试常考基础算法题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-开发面试常考基础算法题"}},[t._v("#")]),t._v(" js 开发面试常考基础算法题")]),t._v(" "),a("h2",{attrs:{id:"_1-不需要借助第三个临时变量，实现两个变量的交换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-不需要借助第三个临时变量，实现两个变量的交换"}},[t._v("#")]),t._v(" 1 不需要借助第三个临时变量，实现两个变量的交换")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function swap（a,b）{\n  b = b - a;\n  a = a + b;\n  b = a - b;\n  return [a,b];\n}\n")])])]),a("h2",{attrs:{id:"_2-确保字符串的每个单词首字母都大写，其余部分小写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-确保字符串的每个单词首字母都大写，其余部分小写"}},[t._v("#")]),t._v(" 2 确保字符串的每个单词首字母都大写，其余部分小写")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function titleCase(str) {\n  var lstr = str.toLowerCase().split(' ');\n  for(var i = 0 ; i < lstr.length; i++) {\n    lstr[i] = lstr[i][0].toUpperCase() + lstr[i].substring(1, lstr[i].length);\n  }\n  var res = lstr.join(' ');\n  return res;\n}\ntitleCase(\"good night\"); // Good Night\n")])])]),a("h2",{attrs:{id:"_3-找出正整数-数组的最大差值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-找出正整数-数组的最大差值"}},[t._v("#")]),t._v(" 3 找出正整数 数组的最大差值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function getMaxPro(arr){\n  var min = arr[0];\n  var max = 0;\n  for (var i=0;i<arr.length;i++){\n    var current = arr[i];\n    min = Math.min(min, current);\n    var res = currenr - min;\n    max = Math.max(max, res);\n  }\n  return max;  \n}\n")])])]),a("h2",{attrs:{id:"_4-清除字符串前后的空格（兼容所有浏览器）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-清除字符串前后的空格（兼容所有浏览器）"}},[t._v("#")]),t._v(" 4 清除字符串前后的空格（兼容所有浏览器）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function trim(str) {\n  if (str & typeof str === \"string\") {\n    return str.replace(/(^s*)|(s*)$/g, ''); //去除前后空白符\n  }\n}\n")])])]),a("h2",{attrs:{id:"_5-去掉一组整型数组中重复的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-去掉一组整型数组中重复的值"}},[t._v("#")]),t._v(" 5 去掉一组整型数组中重复的值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let unique =  function(arr){\n  let hash={};\n  let data=[];\n  for (let i=0;i < arr.length; i++){\n    if (!hash[arr[i]])  {\n      hash[arr[i]] = true;\n      data.push(arr[i]);\n    }      \n  }\n  return data\n}\n")])])]),a("h2",{attrs:{id:"_6-翻转字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-翻转字符串"}},[t._v("#")]),t._v(" 6 翻转字符串")]),t._v(" "),a("ul",[a("li",[t._v("split（）字符串转成数组；")]),t._v(" "),a("li",[t._v("reverse()翻转数组；")]),t._v(" "),a("li",[t._v("join()数组转化成字符串。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function reverseString(str){    \n  return str.split('').reverse().join('');\t\n}\n")])])]),a("h2",{attrs:{id:"_7-找到提供的句子中最长的单词，并计算它的长度。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-找到提供的句子中最长的单词，并计算它的长度。"}},[t._v("#")]),t._v(" 7 找到提供的句子中最长的单词，并计算它的长度。")]),t._v(" "),a("ul",[a("li",[t._v("转化成数组；")]),t._v(" "),a("li",[t._v("根据元素长度排序；")]),t._v(" "),a("li",[t._v("输出最长元素并返回长度。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function findLongestString(str){\n  var arr = str.split(' ');\t\n  var arrSort = arr.sort(function (a,b) {\t   \n    return b.length - a.length;\n  });\n  return [arrSort[0], arrSort[0].length];\n}\n")])])]),a("h2",{attrs:{id:"_8-截断一个字符串，如果字符串的长度比指定的参数num长，则把多余的部分用-来表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-截断一个字符串，如果字符串的长度比指定的参数num长，则把多余的部分用-来表示"}},[t._v("#")]),t._v(" 8 截断一个字符串，如果字符串的长度比指定的参数num长，则把多余的部分用...来表示")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function truncate(str, num){\n  var trStr = str.slice(0, num);\n  if (trStr.length > num) {\t\t\t\t\t\n    return trStr.concat('...');\n  } else {\n    return str;\n  }\n}\n")])])]),a("h2",{attrs:{id:"_9-判断一个字符串中出现次数最多的字符，统计这个次数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-判断一个字符串中出现次数最多的字符，统计这个次数"}},[t._v("#")]),t._v(" 9 判断一个字符串中出现次数最多的字符，统计这个次数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("funcion findMaxStrCount(str) {\n  var countObj = {};\n  var max = '';\n  for(var i = 0; i < str.length; i++) {\n    var cur = str[i];\n    if(!countObj[cur]) {\n      countObj[cur] = 0;\n    } \n    countObj[cur]++;\n    if(max === '' || countObj[cur] > countObj[max]) { max = cur; }\n  }\n  return [max, countObj[max]];\n}\n\n")])])]),a("h2",{attrs:{id:"_10-快速排序（quick-sort）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-快速排序（quick-sort）"}},[t._v("#")]),t._v(" 10 快速排序（Quick Sort）")]),t._v(" "),a("p",[t._v("快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var quickSort = function(arr) {\n　if (arr.length <= 1) { return arr; }\n　var pivotIndex = Math.floor(arr.length / 2);\n　var pivot = arr.splice(pivotIndex, 1)[0];\n　var left = [];\n　var right = [];\n　for (var i = 0; i < arr.length; i++){\n　　if (arr[i] < pivot) {\n　　　left.push(arr[i]);\n　　} else {\n　　　right.push(arr[i]);\n　　}\n　}\n　return quickSort(left).concat([pivot], quickSort(right));\n};\n")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);