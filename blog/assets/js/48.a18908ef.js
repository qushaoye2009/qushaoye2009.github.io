(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{292:function(e,t,r){"use strict";r.r(t);var o=r(28),p=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"proxy和reflect"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proxy和reflect"}},[e._v("#")]),e._v(" Proxy和Reflect")]),e._v(" "),r("p",[e._v("Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。")]),e._v(" "),r("p",[e._v("Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。")]),e._v(" "),r("p",[e._v("Proxy 实际上重载（overload）了点运算符，即用自己的定义覆盖了语言的原始定义。")]),e._v(" "),r("h2",{attrs:{id:"用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[e._v("#")]),e._v(" 用法")]),e._v(" "),r("p",[e._v("Proxy 对象的所有用法，都是下面这种形式：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const proxy = new Proxy(target, handler);\n")])])]),r("p",[e._v("不同的只是handler参数的写法，其中，new Proxy()表示生成一个Proxy实例，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为。")]),e._v(" "),r("p",[e._v("注意，要使得Proxy起作用，必须针对Proxy实例（上例是proxy对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。")]),e._v(" "),r("p",[e._v("如果handler没有设置任何拦截，那就等同于直接通向原对象。")]),e._v(" "),r("h2",{attrs:{id:"支持的拦截操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#支持的拦截操作"}},[e._v("#")]),e._v(" 支持的拦截操作")]),e._v(" "),r("p",[e._v("一共 13 种:")]),e._v(" "),r("ul",[r("li",[e._v("get(target, propKey, receiver)：拦截对象属性的读取，比如proxy.foo和proxy['foo']。")]),e._v(" "),r("li",[e._v("set(target, propKey, value, receiver)：拦截对象属性的设置，比如proxy.foo = v或proxy['foo'] = v，返回一个布尔值。")]),e._v(" "),r("li",[e._v("has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。")]),e._v(" "),r("li",[e._v("deleteProperty(target, propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值。")]),e._v(" "),r("li",[e._v("ownKeys(target)：拦截Object.getOwnPropertyNames(proxy)、- - Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。")]),e._v(" "),r("li",[e._v("getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。")]),e._v(" "),r("li",[e._v("defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。")]),e._v(" "),r("li",[e._v("preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值。")]),e._v(" "),r("li",[e._v("getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象。")]),e._v(" "),r("li",[e._v("isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值。")]),e._v(" "),r("li",[e._v("setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。")]),e._v(" "),r("li",[e._v("apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。")]),e._v(" "),r("li",[e._v("construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。")])]),e._v(" "),r("h2",{attrs:{id:"reflect"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reflect"}},[e._v("#")]),e._v(" Reflect")]),e._v(" "),r("p",[e._v("Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API，Reflect对象的设计目的有这样几个：")]),e._v(" "),r("ul",[r("li",[e._v("将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。")]),e._v(" "),r("li",[e._v("修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。")]),e._v(" "),r("li",[e._v("让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。")]),e._v(" "),r("li",[e._v("Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。")])])])}),[],!1,null,null,null);t.default=p.exports}}]);