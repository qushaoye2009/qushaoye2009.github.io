(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{271:function(t,e,n){"use strict";n.r(e);var s=n(28),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"vuex源码分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuex源码分析"}},[t._v("#")]),t._v(" Vuex源码分析")]),t._v(" "),n("p",[t._v("Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。")]),t._v(" "),n("h2",{attrs:{id:"为何需要它"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为何需要它"}},[t._v("#")]),t._v(" 为何需要它")]),t._v(" "),n("p",[t._v("当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：")]),t._v(" "),n("ul",[n("li",[t._v("多个视图依赖于同一状态。")]),t._v(" "),n("li",[t._v("来自不同视图的行为需要变更同一状态。")])]),t._v(" "),n("p",[t._v("对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。")]),t._v(" "),n("p",[t._v("因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为。")]),t._v(" "),n("h2",{attrs:{id:"核心思想"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#核心思想"}},[t._v("#")]),t._v(" 核心思想")]),t._v(" "),n("p",[t._v("Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)，它和单纯的全局对象有以下两点不同：")]),t._v(" "),n("ul",[n("li",[t._v("Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。")]),t._v(" "),n("li",[t._v("你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。")])]),t._v(" "),n("p",[t._v("另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。\n"),n("img",{attrs:{src:"/blog/img/vuex1.png",alt:"原理图.png"}})]),t._v(" "),n("h2",{attrs:{id:"初始化过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化过程"}},[t._v("#")]),t._v(" 初始化过程")]),t._v(" "),n("p",[t._v(",包括安装、Store 实例化过程 2 个方面, 当我们在代码中通过 import Vuex from 'vuex' 的时候，实际上引用的是一个对象，它的定义在 src/index.js 中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default {\n  Store,\n  install,\n  version: '__VERSION__',\n  mapState,\n  mapMutations,\n  mapGetters,\n  mapActions,\n  createNamespacedHelpers\n}\n")])])]),n("p",[t._v("其中，静态的 install 方法定义在 src/store.js 中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export function install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      )\n    }\n    return\n  }\n  Vue = _Vue\n  applyMixin(Vue)\n}\n")])])]),n("p",[t._v("install 的逻辑很简单，把传入的 _Vue 赋值给 Vue 并执行了 applyMixin(Vue) 方法，它的定义在 src/mixin.js 中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default function (Vue) {\n  const version = Number(Vue.version.split('.')[0])\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit })\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    const _init = Vue.prototype._init\n    Vue.prototype._init = function (options = {}) {\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit\n      _init.call(this, options)\n    }\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    const options = this.$options\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store\n    }\n  }\n}\n")])])]),n("p",[t._v("全局混入了一个 beforeCreate 钩子函数，它的实现非常简单，就是把 options.store 保存在所有组件的 this.$store 中，这个 options.store 就是我们在实例化 Store 对象的实例, 这也是为什么我们在组件中可以通过 this.$store 访问到这个实例。")]),t._v(" "),n("h2",{attrs:{id:"实例化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例化"}},[t._v("#")]),t._v(" 实例化")]),t._v(" "),n("p",[t._v("我们在 import Vuex 之后，会实例化其中的 Store 对象，返回 store 实例并传入 new Vue 的 options 中，也就是我们刚才提到的 options.store。举个简单的例子，如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default new Vuex.Store({\n  actions,\n  getters,\n  state,\n  mutations,\n  modules\n  // ...\n})\n")])])]),n("p",[t._v("Store 对象的构造函数接收一个对象参数，它包含 actions、getters、state、mutations、modules 等 Vuex 的核心概念，它的定义在 src/store.js 中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export class Store {\n  constructor (options = {}) {\n    // Auto install if it is not done yet and `window` has `Vue`.\n    // To allow users to avoid auto-installation in some cases,\n    // this code should be placed here. See #731\n    if (!Vue && typeof window !== 'undefined' && window.Vue) {\n      install(window.Vue)\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(Vue, `must call Vue.use(Vuex) before creating a store instance.`)\n      assert(typeof Promise !== 'undefined', `vuex requires a Promise polyfill in this browser.`)\n      assert(this instanceof Store, `Store must be called with the new operator.`)\n    }\n\n    const {\n      plugins = [],\n      strict = false\n    } = options\n\n    // store internal state\n    this._committing = false\n    this._actions = Object.create(null)\n    this._actionSubscribers = []\n    this._mutations = Object.create(null)\n    this._wrappedGetters = Object.create(null)\n    this._modules = new ModuleCollection(options)\n    this._modulesNamespaceMap = Object.create(null)\n    this._subscribers = []\n    this._watcherVM = new Vue()\n\n    // bind commit and dispatch to self\n    const store = this\n    const { dispatch, commit } = this\n    this.dispatch = function boundDispatch (type, payload) {\n      return dispatch.call(store, type, payload)\n    }\n    this.commit = function boundCommit (type, payload, options) {\n      return commit.call(store, type, payload, options)\n    }\n\n    // strict mode\n    this.strict = strict\n\n    const state = this._modules.root.state\n\n    // init root module.\n    // this also recursively registers all sub-modules\n    // and collects all module getters inside this._wrappedGetters\n    installModule(this, state, [], this._modules.root)\n\n    // initialize the store vm, which is responsible for the reactivity\n    // (also registers _wrappedGetters as computed properties)\n    resetStoreVM(this, state)\n\n    // apply plugins\n    plugins.forEach(plugin => plugin(this))\n\n    if (Vue.config.devtools) {\n      devtoolPlugin(this)\n    }\n  }\n}  \n")])])]),n("p",[t._v("我们把 Store 的实例化过程拆成 3 个部分，分别是初始化模块，安装模块和初始化 store._vm，接下来我们来分析这 3 部分的实现。")]),t._v(" "),n("h2",{attrs:{id:"初始化模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化模块"}},[t._v("#")]),t._v(" 初始化模块")]),t._v(" "),n("p",[t._v("在分析模块初始化之前，我们先来了解一下模块对于 Vuex 的意义：由于使用单一状态树，应用的所有状态会集中到一个比较大的对象，当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter，甚至是嵌套子模块——从上至下进行同样方式的分割：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... },\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n")])])]),n("p",[t._v("所以从数据结构上来看，模块的设计就是一个树型结构，store 本身可以理解为一个 root module，它下面的 modules 就是子模块，Vuex 需要完成这颗树的构建，构建过程的入口就是：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("this._modules = new ModuleCollection(options)\n")])])]),n("p",[t._v("ModuleCollection 的定义在 src/module/module-collection.js 中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default class ModuleCollection {\n  constructor (rawRootModule) {\n    // register root module (Vuex.Store options)\n    this.register([], rawRootModule, false)\n  }\n\n  get (path) {\n    return path.reduce((module, key) => {\n      return module.getChild(key)\n    }, this.root)\n  }\n\n  getNamespace (path) {\n    let module = this.root\n    return path.reduce((namespace, key) => {\n      module = module.getChild(key)\n      return namespace + (module.namespaced ? key + '/' : '')\n    }, '')\n  }\n\n  update (rawRootModule) {\n    update([], this.root, rawRootModule)\n  }\n\n  register (path, rawModule, runtime = true) {\n    if (process.env.NODE_ENV !== 'production') {\n      assertRawModule(path, rawModule)\n    }\n\n    const newModule = new Module(rawModule, runtime)\n    if (path.length === 0) {\n      this.root = newModule\n    } else {\n      const parent = this.get(path.slice(0, -1))\n      parent.addChild(path[path.length - 1], newModule)\n    }\n\n    // register nested modules\n    if (rawModule.modules) {\n      forEachValue(rawModule.modules, (rawChildModule, key) => {\n        this.register(path.concat(key), rawChildModule, runtime)\n      })\n    }\n  }\n\n  unregister (path) {\n    const parent = this.get(path.slice(0, -1))\n    const key = path[path.length - 1]\n    if (!parent.getChild(key).runtime) return\n\n    parent.removeChild(key)\n  }\n}\n")])])]),n("p",[t._v("ModuleCollection 实例化的过程就是执行了 register 方法， register 接收 3 个参数，其中 path 表示路径，因为我们整体目标是要构建一颗模块树，path 是在构建树的过程中维护的路径；rawModule 表示定义模块的原始配置；runtime 表示是否是一个运行时创建的模块。")]),t._v(" "),n("p",[t._v("register 方法首先通过 const newModule = new Module(rawModule, runtime) 创建了一个 Module 的实例，Module 是用来描述单个模块的类，它的定义在 src/module/module.js 中：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default class Module {\n  constructor (rawModule, runtime) {\n    this.runtime = runtime\n    // Store some children item\n    this._children = Object.create(null)\n    // Store the origin module object which passed by programmer\n    this._rawModule = rawModule\n    const rawState = rawModule.state\n\n    // Store the origin module's state\n    this.state = (typeof rawState === 'function' ? rawState() : rawState) || {}\n  }\n\n  get namespaced () {\n    return !!this._rawModule.namespaced\n  }\n\n  addChild (key, module) {\n    this._children[key] = module\n  }\n\n  removeChild (key) {\n    delete this._children[key]\n  }\n\n  getChild (key) {\n    return this._children[key]\n  }\n\n  update (rawModule) {\n    this._rawModule.namespaced = rawModule.namespaced\n    if (rawModule.actions) {\n      this._rawModule.actions = rawModule.actions\n    }\n    if (rawModule.mutations) {\n      this._rawModule.mutations = rawModule.mutations\n    }\n    if (rawModule.getters) {\n      this._rawModule.getters = rawModule.getters\n    }\n  }\n\n  forEachChild (fn) {\n    forEachValue(this._children, fn)\n  }\n\n  forEachGetter (fn) {\n    if (this._rawModule.getters) {\n      forEachValue(this._rawModule.getters, fn)\n    }\n  }\n\n  forEachAction (fn) {\n    if (this._rawModule.actions) {\n      forEachValue(this._rawModule.actions, fn)\n    }\n  }\n\n  forEachMutation (fn) {\n    if (this._rawModule.mutations) {\n      forEachValue(this._rawModule.mutations, fn)\n    }\n  }\n}\n")])])]),n("h2",{attrs:{id:"数据获取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据获取"}},[t._v("#")]),t._v(" 数据获取")]),t._v(" "),n("p",[t._v("Vuex 最终存储的数据是在 state 上的，我们之前分析过在 store.state 存储的是 root state，那么对于模块上的 state，假设我们有 2 个嵌套的 modules，它们的 key 分别为 a 和 b，我们可以通过 store.state.a.b.xxx 的方式去获取。它的实现是在发生在 installModule 的时候：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function installModule (store, rootState, path, module, hot) {\n  const isRoot = !path.length\n  \n  // ...\n  // set state\n  if (!isRoot && !hot) {\n    const parentState = getNestedState(rootState, path.slice(0, -1))\n    const moduleName = path[path.length - 1]\n    store._withCommit(() => {\n      Vue.set(parentState, moduleName, module.state)\n    })\n  }\n  // ...\n}\n")])])]),n("p",[t._v("在递归执行 installModule 的过程中，就完成了整个 state 的建设，这样我们就可以通过 module 名的 path 去访问到一个深层 module 的 state。")]),t._v(" "),n("p",[t._v("有些时候，我们获取的数据不仅仅是一个 state，而是由多个 state 计算而来，Vuex 提供了 getters，允许我们定义一个 getter 函数，如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("getters: {\n  total (state, getters, localState, localGetters) {\n    // 可访问全局 state 和 getters，以及如果是在 modules 下面，可以访问到局部 state 和 局部 getters\n    return state.a + state.b\n  }\n}\n")])])]),n("p",[t._v("我们在 installModule 的过程中，递归执行了所有 getters 定义的注册，在之后的 resetStoreVM 过程中，执行了 store.getters 的初始化工作：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function installModule (store, rootState, path, module, hot) {\n  // ...\n  const namespace = store._modules.getNamespace(path)\n  // ...\n  const local = module.context = makeLocalContext(store, namespace, path)\n\n  // ...\n\n  module.forEachGetter((getter, key) => {\n    const namespacedType = namespace + key\n    registerGetter(store, namespacedType, getter, local)\n  })\n\n  // ...\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`[vuex] duplicate getter key: ${type}`)\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  }\n}\n\n\nfunction resetStoreVM (store, state, hot) {\n  // ...\n  // bind store public getters\n  store.getters = {}\n  const wrappedGetters = store._wrappedGetters\n  const computed = {}\n  forEachValue(wrappedGetters, (fn, key) => {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = () => fn(store)\n    Object.defineProperty(store.getters, key, {\n      get: () => store._vm[key],\n      enumerable: true // for local getters\n    })\n  })\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  // ...\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed\n  })\n  // ...\n}\n")])])]),n("p",[t._v("在 installModule 的过程中，为建立了每个模块的上下文环境， 因此当我们访问 store.getters.xxx 的时候，实际上就是执行了 rawGetter(local.state,...)，rawGetter 就是我们定义的 getter 方法，这也就是为什么我们的 getter 函数支持这四个参数，并且除了全局的 state 和 getter 外，我们还可以访问到当前 module 下的 state 和 getter。")]),t._v(" "),n("h2",{attrs:{id:"数据存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据存储"}},[t._v("#")]),t._v(" 数据存储")]),t._v(" "),n("p",[t._v("Vuex 对数据存储的存储本质上就是对 state 做修改，并且只允许我们通过提交 mutaion 的形式去修改 state，mutation 是一个函数，如下：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("mutations: {\n  increment (state) {\n    state.count++\n  }\n}\n")])])]),n("p",[t._v("mutations 的初始化也是在 installModule 的时候：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function installModule (store, rootState, path, module, hot) {\n  // ...\n  const namespace = store._modules.getNamespace(path)\n\n  // ...\n  const local = module.context = makeLocalContext(store, namespace, path)\n\n  module.forEachMutation((mutation, key) => {\n    const namespacedType = namespace + key\n    registerMutation(store, namespacedType, mutation, local)\n  })\n  // ...\n}\n\nfunction registerMutation (store, type, handler, local) {\n  const entry = store._mutations[type] || (store._mutations[type] = [])\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload)\n  })\n}\nstore 提供了commit 方法让我们提交一个 mutation：\n\ncommit (_type, _payload, _options) {\n  // check object-style commit\n  const {\n    type,\n    payload,\n    options\n  } = unifyObjectStyle(_type, _payload, _options)\n\n  const mutation = { type, payload }\n  const entry = this._mutations[type]\n  if (!entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`[vuex] unknown mutation type: ${type}`)\n    }\n    return\n  }\n  this._withCommit(() => {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload)\n    })\n  })\n  this._subscribers.forEach(sub => sub(mutation, this.state))\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    options && options.silent\n  ) {\n    console.warn(\n      `[vuex] mutation type: ${type}. Silent option has been removed. ` +\n      'Use the filter functionality in the vue-devtools'\n    )\n  }\n}\n")])])]),n("p",[t._v("这里传入的 _type 就是 mutation 的 type，我们可以从 store._mutations 找到对应的函数数组，遍历它们执行获取到每个 handler 然后执行，实际上就是执行了 wrappedMutationHandler(playload)，接着会执行我们定义的 mutation 函数，并传入当前模块的 state，所以我们的 mutation 函数也就是对当前模块的 state 做修改。")]),t._v(" "),n("p",[t._v("需要注意的是， mutation 必须是同步函数，但是我们在开发实际项目中，经常会遇到要先去发送一个请求，然后根据请求的结果去修改 state，那么单纯只通过 mutation 是无法完成需求，因此 Vuex 又给我们设计了一个 action 的概念。")]),t._v(" "),n("p",[t._v("action 类似于 mutation，不同在于 action 提交的是 mutation，而不是直接操作 state，并且它可以包含任意异步操作。例如：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("mutations: {\n  increment (state) {\n    state.count++\n  }\n},\nactions: {\n  increment (context) {\n    setTimeout(() => {\n      context.commit('increment')\n    }, 0)\n  }\n}\n")])])]),n("p",[t._v("actions 的初始化也是在 installModule 的时候：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function installModule (store, rootState, path, module, hot) {\n  // ...\n  const namespace = store._modules.getNamespace(path)\n\n  // ...\n  const local = module.context = makeLocalContext(store, namespace, path)\n\n  module.forEachAction((action, key) => {\n    const type = action.root ? key : namespace + key\n    const handler = action.handler || action\n    registerAction(store, type, handler, local)\n}  )\n  // ...\n}\n\nfunction registerAction (store, type, handler, local) {\n  const entry = store._actions[type] || (store._actions[type] = [])\n  entry.push(function wrappedActionHandler (payload, cb) {\n    let res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb)\n    if (!isPromise(res)) {\n      res = Promise.resolve(res)\n    }\n    if (store._devtoolHook) {\n      return res.catch(err => {\n        store._devtoolHook.emit('vuex:error', err)\n        throw err\n      })\n    } else {\n      return res\n    }\n  })\n}\n")])])]),n("p",[t._v("store 提供了dispatch 方法让我们提交一个 action：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("dispatch (_type, _payload) {\n  // check object-style dispatch\n  const {\n    type,\n    payload\n  } = unifyObjectStyle(_type, _payload)\n\n  const action = { type, payload }\n  const entry = this._actions[type]\n  if (!entry) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`[vuex] unknown action type: ${type}`)\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(sub => sub(action, this.state))\n\n  return entry.length > 1\n    ? Promise.all(entry.map(handler => handler(payload)))\n    : entry[0](payload)\n}\n")])])]),n("p",[t._v("这里传入的 _type 就是 action 的 type，我们可以从 store._actions 找到对应的函数数组，遍历它们执行获取到每个 handler 然后执行，实际上就是执行了 wrappedActionHandler(payload)，接着会执行我们定义的 action 函数，并传入一个对象，包含了当前模块下的 dispatch、commit、getters、state，以及全局的 rootState 和 rootGetters，所以我们定义的 action 函数能拿到当前模块下的 commit 方法。")]),t._v(" "),n("p",[t._v("因此 action 比我们自己写一个函数执行异步操作然后提交 muataion 的好处是在于它可以在参数中获取到当前模块的一些方法和状态，Vuex 帮我们做好了这些。")])])}),[],!1,null,null,null);e.default=a.exports}}]);